
rule ME_reads:
    input:
        config["master_output_directory"] + "Round2/{sample}.sam.pre_processed"
    output:
        temp(config["master_output_directory"] + "Round2/{sample}.sam.pre_processed.fastq")
    priority: 100
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/round2_ME_reads_fastq.py {input} > {output}"

rule Get_Genome:
    input:
        config["Genome_fasta"]
    output:
        config["master_output_directory"] + "data/Genome"
    priority: 100
    shell:
        "cp {input} {output}"

rule bowtie_Genome_index:
    input:
        config["master_output_directory"] + "data/Genome"
    output:
        config["master_output_directory"] + "data/Genome" + ".1.ebwt"
    priority: 100
    conda:
        "../envs/core.yaml"
    shell:
        "bowtie-build {input} {input}"

rule bowtie_to_genome:
    input:
        config["master_output_directory"] + "Round2/{sample}.sam.pre_processed.fastq",
        config["master_output_directory"] + "data/Genome",
        config["master_output_directory"] + "data/Genome" + ".1.ebwt"
    output:
        temp(config["master_output_directory"] + "Round2/{sample}.sam.pre_processed.hg19.sam")
    priority: 100
    conda:
        "../envs/core.yaml"
    shell:
        "bowtie {input[1]} -p 1 -q {input[0]} -S -v 2 --seed 123| awk '$2==0 || $2==16'> {output}"


rule Round2_filter:
    input:
        config["master_output_directory"] + "Round2/{sample}.sam.pre_processed",
        config["master_output_directory"] + "Round2/{sample}.sam.pre_processed.hg19.sam",
    output:
        temp(config["master_output_directory"] + "Round2/{sample}.sam.pre_processed.filter1")
    priority: 100
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/Filter1_round2.py {input} > {output}"


rule ME_SJ_coverage:
    input:
        config["master_output_directory"] + "Round2/ME_canonical_SJ_tags.fa",
        config["master_output_directory"] + "Round2/TOTAL.ME_centric.txt",
        config["Gene_anontation_bed12"],
        config["master_output_directory"] + "Round2/{sample}.sam.pre_processed.filter1"
    params:
        ME_len = config["ME_len"]
    output:
        protected(config["master_output_directory"] + "Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage")
    priority: 100
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/ME_SJ_coverage.py {input} {params.ME_len} > {output}"


rule Total_sample_exon_counts:
    input:
        expand("{outdir}Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage", outdir = config["master_output_directory"], sample=DATA )
    output:
        config["master_output_directory"] + "Round2/TOTAL.filter1.ME_SJ_coverage"
    params:
        config["master_output_directory"] + "Round2/"
    conda:
        "../envs/core.yaml"
    shell:
      "cat {params}*.filter1.ME_SJ_coverage > {output}"

rule write_ME_matches:
    input:
        config["master_output_directory"] + "Round2/TOTAL.ME_centric.txt"
    output:
        config["master_output_directory"] + "Round2/TOTAL.ME_centric.ME_matches.txt"
    conda:
        "../envs/core_py3.yaml"
    shell:
        "python3 src/Get_ME_matches.py {input} > {output}"


rule Output:
    input:
        config["master_output_directory"] + "Round2/TOTAL.ME_centric.txt",
        config["master_output_directory"] + "Round2/TOTAL.filter1.ME_SJ_coverage",
        config["master_output_directory"] + "Round2/TOTAL.ME_centric.ME_matches.txt"

    params:
        wd = config["working_directory"],
        min_number_files_detected = config["min_number_files_detected"]
    output:
        config["master_output_directory"] + "Report/out_filtered_ME.txt",
        config["master_output_directory"] + "Report/out_low_scored_ME.txt",
        config["master_output_directory"] + "Report/out_shorter_than_3_ME.txt",
        config["master_output_directory"] + "Report/report.html",
        config["master_output_directory"] + "Report/out_filtered_ME.cov.txt"
    log:
        "logs/Output.log"
    conda:
        "../envs/R.yaml"
    shell:
        '''R -e  'rmarkdown::render("src/final_filters2.Rmd",params = list(ME_table="{input[0]}", ME_coverage="{input[1]}", ME_matches_file="{input[2]}", out_filtered_ME="{output[0]}", out_low_scored_ME="{output[1]}", out_shorter_than_3_ME="{output[2]}", min_number_files_detected={params.min_number_files_detected}, out_filtered_ME_cov="{output[4]}" ), output_file="{output[3]}")' 2> {log} '''


rule high_confident_filters:
    input:
        config["Genome_fasta"],
        config["Gene_anontation_bed12"],
        config["master_output_directory"] + "Report/out_filtered_ME.cov.txt",
        config["master_output_directory"] + "Report/out_filtered_ME.txt",
        config["master_output_directory"] + "Report/out_low_scored_ME.txt"
    output:
        config["master_output_directory"] + "Report/out.high_quality.txt"
    conda:
        "../envs/core_py3.yaml"
    shell:
        "python src/high_confident_list.py {input}  > {output}"


rule coverage_to_PSI:
    input:
        config["master_output_directory"] + "Report/out_filtered_ME.cov.txt",
    params:
        config["min_reads_PSI"],
        config["paired_samples"]
    output:
        config["master_output_directory"] + "Report/out_filtered_ME.PSI.txt"
    conda:
        "../envs/core_py3.yaml"
    shell:
        "python src/counts_to_PSI.py {input} {params} > {output}"

rule get_annotation_status_tbl:
    input:
        config["master_output_directory"] + "data/ME_canonical_SJ_tags.DB.fa",
        config["master_output_directory"] + "Report/out.high_quality.txt",
        config["master_output_directory"] + "Report/out_low_scored_ME.txt",
        config["master_output_directory"] + "Report/out_shorter_than_3_ME.txt"

    output:
        config["master_output_directory"] + "Report/out.high_quality.annot_status.txt",
        config["master_output_directory"] + "Report/out_low_scored_ME.annot_status.txt",
        config["master_output_directory"] + "Report/out_shorter_than_3_ME.annot_status.txt"

    params:
        lambda wildcards, input: ','.join(input[1:])

    conda:
        "../envs/core_py3.yaml"

    shell:
        "python src/classify_me_annotation_status.py {input[0]} {params}"

#rule annotation_stats:
#    input:
#        config["Gene_anontation_bed12"],
#        config["master_output_directory"] + "Report/out.high_quality.txt",
#    params:
#        config["min_number_files_detected"]
#    output:
#        config["master_output_directory"] + "Report/stats/Microexons.not_consensus",
#        config["master_output_directory"] + "Report/stats/Microexons.annotation.stats"
#    conda:
#        "../envs/core_py3.yaml"
#    shell:
#        "python3 src/stats/discovery_stats.py {input} {params}"
