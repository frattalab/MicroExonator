rule Get_ME_from_annotation:
    input:
        config["Genome_fasta"],
        "Round1/TOTAL/TOTAL.sam.row_ME.filter1.ME_centric",
        config["Gene_anontation_bed12"],
        "data/GT_AG_U2_5.pwm",
        "data/GT_AG_U2_3.pwm",
        config["ME_DB"]
    params:
        bw = config["conservation_bigwig"],
        ME_len = config["ME_len"]
    output:
        "data/ME_canonical_SJ_tags.DB.fa",
        "data/DB.ME_centric"
    conda:
        "../envs/pybedtools.yaml"
    shell:
        "python2 src/Get_annotated_microexons.py  {input[0]} {input[1]} {input[2]} {input[3]} {input[4]} {params.bw} {params.ME_len} {input[5]} "


rule merge_tags:
    input:
        "Round2/ME_canonical_SJ_tags.de_novo.fa",
        "data/ME_canonical_SJ_tags.DB.fa"
    output:
        "Round2/ME_canonical_SJ_tags.fa"
    conda:
        "../envs/core.yaml"
    shell:
        "cat {input[0]} {input[1]} > {output}"


rule merge_ME_centric:
    input:
        "Round1/TOTAL/TOTAL.sam.row_ME.filter1.ME_centric",
        "data/DB.ME_centric"
    output:
        "Round2/TOTAL.ME_centric.txt"
    conda:
        "../envs/core.yaml"
    shell:
        "cat {input[0]} {input[1]} > {output}"


rule Round2_bowtie_tags_index:
    input:
        "Round2/ME_canonical_SJ_tags.fa"
    output:
        "Round2/ME_canonical_SJ_tags.fa.1.ebwt"
    conda:
        "../envs/core.yaml"
    shell:
        "bowtie-build {input} {input}"

rule download_fastq2:
    input:
        "download/{sample}.download.sh",
        "Round2/TOTAL.ME_centric.txt"
    params:
        "FASTQ/{sample}.fastq"
    output:
        temp("FASTQ/round2/{sample}.fastq")
    priority: -10
    resources:
        get_data = 1
    conda:
        "../envs/core.yaml"
    shell:
        #"bash {input[0]}"
        "bash {input[0]} && mv {params} {output}"

def hard_drive_behavior(fastq):
    if config["Optimize_hard_drive"]=="T":
        return(  "FASTQ/round2/" + fastq + ".fastq")
    elif config["Optimize_hard_drive"]=="F":
        return("FASTQ/" + fastq + ".fastq")

rule Round2_bowtie_to_tags:
    input:
        "Round2/ME_canonical_SJ_tags.fa",
        hard_drive_behavior("{sample}"),
        "Round2/ME_canonical_SJ_tags.fa.1.ebwt"
    output:
        temp("Round2/{sample}.sam")
    threads: 5
    priority: 100
    conda:
        "../envs/core.yaml"
    shell:
        "bowtie {input[0]} -p {threads} -q {input[1]} -S -v 2 --seed 123 {output}"


rule sam_to_bam:
    input:
        "Round2/{sample}.sam",

    output:
        "Round2/{sample}.bam"

    conda:
        "../envs/core.yaml"

    shell:
        "samtools view -b {input} -o {output}"


rule Round2_bowtie_sam_to_tags:
    input:
        "Round2/{sample}.sam",

    output:
        temp("Round2/{sample}.tags.sam")

    shell:
        "awk '!($6 ~ /I/) && !($6 ~ /D/) && !($6 ~ /S/) && !($6 ~ /*/)' {input} > {output}"

rule Round2_alingment_pre_processing:
    input:
        "Round2/{sample}.tags.sam"
    output:
        temp("Round2/{sample}.sam.pre_processed")
    priority: 100
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/alingment_pre_processing_round2_bowtie.py {input} F > {output}"
