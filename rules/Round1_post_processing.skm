

rule row_Micro_Exon_reads:
    input:
        "" + config["Genome_fasta"],
        config["master_output_directory"] + "Round1/{sample}.sam.pre_processed"
    output:
        temp(config["master_output_directory"] + "Round1/{sample}.sam.row_ME"),
        temp(config["master_output_directory"] + "Round1/{sample}.sam.row_ME.fastq")
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/row_ME.py {input} > {output[0]}"


rule hisat2_Genome_index:
    input:
        config["Genome_fasta"]
    output:
        config["master_output_directory"] + "data/Genome.1.ht2"
    threads: 5
    conda:
        "../envs/core.yaml"
    shell:
        "hisat2-build {input} data/Genome"


rule hisat2_to_Genome:
    input:
        config["master_output_directory"] + "Round1/{sample}.sam.row_ME.fastq",
        config["master_output_directory"] + "data/Genome.1.ht2"
    output:
        temp(config["master_output_directory"] + "Round1/{sample}.sam.row_ME.Genome.Aligned.out.sam")
    threads: 1
    conda:
        "../envs/core.yaml"
    shell:
        "hisat2 -x data/Genome -U {input[0]} > {output}"


rule Round1_filter:
    input:
        config["Genome_fasta"],
        config["master_output_directory"] + "Round1/{sample}.sam.row_ME",
        config["master_output_directory"] + "Round1/{sample}.sam.row_ME.Genome.Aligned.out.sam",
        config["master_output_directory"] + "data/GT_AG_U2_5.pwm",
        config["master_output_directory"] + "data/GT_AG_U2_3.pwm"
    params:
        bw = config["conservation_bigwig"],
        ME_len = config["ME_len"]
    output:
        protected(config["master_output_directory"] + "Round1/{sample}.sam.row_ME.filter1")
    conda:
        "../envs/pybedtools.yaml"
    shell:
        "python2 src/ME_filter1.py {input} {params.bw} {params.ME_len} > {output}"


rule Micro_Exon_table:
    input:
        expand("{outdir}Round1/{sample}.sam.row_ME.filter1", outdir = config["master_output_directory"], sample=DATA )
    output:
        config["master_output_directory"] + "Round1/TOTAL/TOTAL.sam.row_ME.filter1",
        protected(config["master_output_directory"] + "Round1/TOTAL/TOTAL.sam.row_ME.filter1.ME_centric")
    conda:
        "../envs/core.yaml"
    shell:
        "cat {input} > {output[0]}  &&"
        "python2 src/ME_centric_table.py {output[0]} > {output[1]}"


rule Micro_Exon_Tags:
    input:
        config["master_output_directory"] + "Round1/ME_TAGs.fa",
        config["master_output_directory"] + "Round1/TOTAL/TOTAL.sam.row_ME.filter1.ME_centric"
    output:
        config["master_output_directory"] + "Round2/ME_canonical_SJ_tags.de_novo.fa"
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/Micro_exons_tags.py  {input} > {output}"
